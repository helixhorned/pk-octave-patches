# HG changeset patch
# Parent 5ec4b7006b82f10a7776bcc5dfdb4bdbc18045c6
Make rand(..., 'single') never return a value of exactly 1 (bug #41742).

* liboctave/numeric/randmtzig.c: rewrite randu32() to multiply 2^-32 with a
  random number from 1 to LASTLINT, where LASTLINT is the greatest integer n
  for which (float)(2^-32 * n) < 1.0. Use static assertions to back up this
  claim.

diff --git a/liboctave/numeric/randmtzig.c b/liboctave/numeric/randmtzig.c
--- a/liboctave/numeric/randmtzig.c
+++ b/liboctave/numeric/randmtzig.c
@@ -389,12 +389,33 @@
 #endif
 }
 
+/* For randu32 */
+#define RU32_TWOUPM32 (1.0 / (65536.0 * 65536.0))
+#define RU32_LASTLINT ((uint32_t)(-129))
+#define RU32_SAMPLE_0_1(i) (RU32_TWOUPM32 * (i))
+
+/* Static assertions, based on source found in LuaJIT's src/lj_def.h. */
+#define OCT_ASSERT_NAME2(name, line) name ## line
+#define OCT_ASSERT_NAME(line) OCT_ASSERT_NAME2(oct_assert_, line)
+#define OCT_STATIC_ASSERT(cond) \
+  extern void OCT_ASSERT_NAME(__LINE__)(int STATIC_ASSERTION_FAILED[(cond)?1:-1])
+
+OCT_STATIC_ASSERT ((float)RU32_SAMPLE_0_1 (RU32_LASTLINT) < 1.0f);
+OCT_STATIC_ASSERT ((float)RU32_SAMPLE_0_1 (RU32_LASTLINT+1) == 1.0f);
+
 /* generates a random number on (0,1)-real-interval */
 static float
 randu32 (void)
 {
-  return ((float)randi32 () + 0.5) * (1.0/4294967296.0);
-  /* divided by 2^32 */
+  uint32_t i;
+
+  do
+    {
+      i = randi32 ();
+    }
+  while (i == 0 || i > RU32_LASTLINT);
+
+  return RU32_SAMPLE_0_1 (i);
 }
 
 /* generates a random number on (0,1) with 53-bit resolution */
